# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AppleSubscriptionEnvironment {
  PRODUCTION
  SANDBOX
}

type Banner {
  buttonTitle: String!
  description: String

  """掲載終了時間"""
  endAt: Date!
  id: ID!

  """掲載開始時間"""
  startAt: Date!
  title: String!
  url: String!
}

input CreateAppleSubscriptionInput {
  environment: AppleSubscriptionEnvironment!
  transactionId: String!
}

input CreateFirebaseRegistrationTokenInput {
  """registration token"""
  token: String!
}

input CreateInvitationInput {
  code: String!
}

input CreateLikeInput {
  """LIKEを送信する相手のID"""
  targetUserId: String!
}

type CreateLikeResponse {
  """マッチしなかった場合のみ返却される"""
  feedback: Feedback

  """マッチした場合のみ返却される"""
  match: Match
}

input CreateMessageInput {
  """メッセージを送信する対象のユーザー"""
  targetUserId: String!

  """メッセージ内容"""
  text: String!
}

input CreateNopeInput {
  """NOPEを送信する相手のID"""
  targetUserId: String!
}

input CreateReportInput {
  """通報対象のユーザーID"""
  targetUserId: String!

  """通報理由"""
  text: String!

  """通報理由のタイトル"""
  title: String!
}

input CreateUserInput {
  countryCode: String
}

"""Date custom scalar type"""
scalar Date

input DeleteMatchInput {
  """削除したいユーザーID"""
  targetUserId: String!
}

input DeleteMessageInput {
  """削除するメッセージのID"""
  messageId: String!
}

type Feedback {
  """feedback type"""
  feedbackType: FeedbackType!

  """feedback id"""
  id: ID!

  """target user id"""
  targetUserId: ID!

  """user id"""
  userId: ID!
}

enum FeedbackType {
  LIKE
  NOPE
  UNSPECIFIED
}

type FirebaseRegistrationToken {
  """firebase registration token id"""
  id: ID!

  """firebase registration token"""
  token: String!
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

type InvitationCampaign {
  """何週間メンバーシップを付与するのか"""
  durationWeeks: Int!
  id: ID!

  """招待キャンペーンの発行数"""
  quantity: Int!
}

type InvitationCode {
  """招待コード"""
  code: String!
  id: ID!
}

type LinearGradient {
  colors: [String!]!
  endPoint: UnitPoint!
  startPoint: UnitPoint!
}

type Match {
  createdAt: Date!

  """match id"""
  id: ID!

  """既読かどうか"""
  isRead: Boolean!

  """マッチした相手"""
  targetUser: User!

  """target user id"""
  targetUserId: ID!

  """user id"""
  userId: ID!
}

type MatchConnection {
  edges: [MatchEdge!]!
  pageInfo: PageInfo!
}

type MatchEdge {
  cursor: String!
  node: Match!
}

type Message {
  """When the message is created"""
  createdAt: Date!

  """When the message is deleted by a user"""
  deletedAt: Date

  """direct message id"""
  id: ID!

  """When the message is read by a target user"""
  readAt: Date

  """target user id"""
  targetUserId: ID!

  """message content"""
  text: String!

  """user id"""
  userId: ID!
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

type Mutation {
  """アカウントを閉じる"""
  closeUser: Boolean!

  """Appleの課金契約を記録する"""
  createAppleSubscription(input: CreateAppleSubscriptionInput!): Boolean!

  """FirebaseのRegistrationTokenを作成する"""
  createFirebaseRegistrationToken(input: CreateFirebaseRegistrationTokenInput!): FirebaseRegistrationToken!

  """招待を作成"""
  createInvitation(input: CreateInvitationInput!): Boolean!

  """LIKEを作成する"""
  createLike(input: CreateLikeInput!): CreateLikeResponse!

  """メッセージの作成"""
  createMessage(input: CreateMessageInput!): Message!

  """NOPEを作成する"""
  createNope(input: CreateNopeInput!): Feedback!

  """ユーザーを通報する"""
  createReport(input: CreateReportInput!): Boolean!

  """ユーザーを作成する"""
  createUser: User! @deprecated(reason: "use createUserV2")

  """ユーザーを作成する"""
  createUserV2(input: CreateUserInput!): User!

  """マッチを削除する"""
  deleteMatch(input: DeleteMatchInput!): Boolean!

  """メッセージの削除"""
  deleteMessage(input: DeleteMessageInput!): Boolean!

  """Matchを既読にする"""
  readMatch(matchId: String!): Match!

  """この mutation を呼ぶ前に作成されたメッセージすべてを既読にする"""
  readMessages(input: ReadMessageInput!): Int!

  """BeRealのユーザー名を更新する"""
  updateBeReal(input: UpdateBeRealInput!): User!

  """性別を更新する"""
  updateGender(input: UpdateGenderInput!): User!

  """一言コメントを更新する"""
  updateShortComment(input: UpdateShortCommentInput!): User!

  """プロフィール画像を更新する"""
  updateUserImage(input: UpdateUserImageInput!): [UserImage!]!
}

type PageInfo {
  """最後のedgeのカーソル"""
  endCursor: String

  """次のページがあるかどうか"""
  hasNextPage: Boolean!

  """最初のedgeのカーソル"""
  startCursor: String
}

type PushNotificationBadge {
  """バッジ数"""
  count: Int!
  id: ID!
}

type Query {
  """招待キャンペーンを取得"""
  activeInvitationCampaign: InvitationCampaign

  """バナー一覧"""
  banners: [Banner!]!

  """ログイン中ユーザーを取得"""
  currentUser: User!

  """メンバーシップが有効かどうか"""
  hasPremiumMembership: Boolean!

  """招待コードを取得"""
  invitationCode: InvitationCode!
  lang: String!

  """マッチ一覧"""
  matches(after: String, first: Int!): MatchConnection!

  """特定のユーザーとのダイレクトメッセージ一覧"""
  messagesWith(
    after: String
    first: Int!

    """メッセージ相手のユーザーID"""
    targetUserId: ID!

    """自身のユーザーID"""
    userId: ID!
  ): MessageConnection!
  pushNotificationBadge: PushNotificationBadge!

  """自分の受け取ったLikeを取得する"""
  receivedLike: ReceivedLike!

  """ユーザー一覧"""
  recommendations: [User!]!
  userCategories: [UserCategory!]!

  """LIKEしてくれたユーザー一覧"""
  usersByLiker: [User!]!

  """最近一言コメントを更新したユーザー一覧"""
  usersByRecentShortComments: [User!]!
}

input ReadMessageInput {
  """既読にするメッセージの送信ユーザーID"""
  targetUserId: String!
}

type ReceivedLike {
  """受け取ったLike数"""
  count: Int!
  id: ID!

  """Likeを送った最新ユーザー"""
  latestUser: User

  """表示の最大かどうか"""
  reachedLimit: Boolean!
}

type ShortComment {
  body: String!
  id: ID!
  status: ShortCommentStatus!
  userId: String!
}

enum ShortCommentStatus {
  APPROVED
  IN_REVIEW
  REJECTED
}

enum UnitPoint {
  BOTTOM
  BOTTOM_LEADING
  BOTTOM_TRAILING
  LEADING
  TOP
  TOP_LEADING
  TOP_TRAILING
  TRAILING
}

input UpdateBeRealInput {
  """BeRealのユーザー名"""
  username: String!
}

input UpdateGenderInput {
  """性別"""
  gender: Gender!
}

input UpdateShortCommentInput {
  body: String!
}

input UpdateUserImageInput {
  """ユーザー画像URL"""
  imageUrls: [String!]!
}

type User {
  """BeRealのusername"""
  berealUsername: String!

  """firebase uid"""
  firebaseUid: String!

  """gender"""
  gender: Gender!

  """user id"""
  id: ID!

  """ユーザーの画像一覧"""
  images: [UserImage!]!

  """一言コメント"""
  shortComment: ShortComment
  status: UserStatus!
}

type UserCategory {
  background: LinearGradient!
  id: ID!
  order: Int!
  title: String!
  users: [User!]!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserImage {
  id: ID!
  imageUrl: String!
  order: Int!
}

enum UserStatus {
  ACTIVE
  BANNED
  CLOSED
}